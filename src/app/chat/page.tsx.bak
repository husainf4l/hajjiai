"use client";

import { useState, useRef, useEffect } from "react";
import Sidebar from "../components/Sidebar/Sidebar";
import { sendMessageToWebhook } from "../actions";
import { FormatMessage } from "../components/ChatArea/ChatArea";

// Function to clean response string from special format markers
const cleanResponseText = (text: string): string => {
  // Remove API response markers like "0:{"a":"$@1"..." or "2:T79e," at the beginning
  const cleanText = text
    .replace(/^\d+:\s*{.*?}\s*\d*:(?:T\w+,)?/s, "")
    .replace(/^\$\d+$/, "")
    .replace(/\$@\d+/g, "") // Remove any remaining API markers like $@1
    .replace(/\\n/g, "\n") // Fix escaped newlines
    .trim();

  return cleanText;
};

// Function to format message text with line breaks and styling
const FormatMessage = ({ text }: { text: string }) => {
  // Clean any API response markers
  const cleanText = cleanResponseText(text);

  // Split the text by line breaks
  const lines = cleanText.split("\n");

  // Function to highlight monetary values
  const formatMonetaryValues = (line: string) => {
    return (
      line
        .replace(
          /(\d{1,3}(?:,\d{3})*(?:\.\d+)?\s*(?:IQD|USD|$))/g,
          '<span class="text-green-400 font-semibold">$1</span>'
        )
        .replace(
          /(\d+(?:\.\d+)?%)/g,
          '<span class="text-blue-400 font-semibold">$1</span>'
        )
        .replace(
          /(≈\d+(?:\.\d+)?%)/g,
          '<span class="text-blue-400 font-semibold">$1</span>'
        )
        // Format large numbers without currency symbols
        .replace(
          /(\b\d{1,3}(?:,\d{3})+(?:\.\d+)?\b)(?!\s*(?:IQD|USD|$|%))/g,
          '<span class="text-yellow-300 font-semibold">$1</span>'
        )
        // Format date ranges
        .replace(
          /(\d{1,2}\/\d{1,2}\/\d{2,4}\s*-\s*\d{1,2}\/\d{1,2}\/\d{2,4})/g,
          '<span class="text-purple-300 font-semibold">$1</span>'
        )
        // Format time periods
        .replace(
          /(\b(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)[a-z]*\s+\d{4}\b)/gi,
          '<span class="text-purple-300 font-semibold">$1</span>'
        )
    );
  };

  // Function to create HTML from line with monetary formatting
  const createHtmlWithFormatting = (line: string) => {
    const formattedLine = formatMonetaryValues(line);
    return <div dangerouslySetInnerHTML={{ __html: formattedLine }} />;
  };

  return (
    <div className="whitespace-pre-wrap break-words">
      {lines.map((line, i) => {
        // Report title
        if (line.includes("Sales Report") || line.includes("Report")) {
          return (
            <div
              key={i}
              className="font-bold text-xl text-blue-300 border-b border-gray-600 pb-2 mb-3"
            >
              {createHtmlWithFormatting(line)}
            </div>
          );
        }
        // Check for Owner's Summary section
        else if (
          line.includes("Owner's Summary") ||
          line.includes("Ownerâ€™s Summary") ||
          line.includes("Owner's Summary")
        ) {
          return (
            <div
              key={i}
              className="font-bold text-yellow-300 text-lg border-t border-b border-gray-600 py-2 my-3"
            >
              {line}
            </div>
          );
        }
        // Executive Summary or major section headers
        else if (
          line.includes("Executive Summary:") ||
          line.includes("Insights:") ||
          line.includes("Key") ||
          line.includes("Actionable Insights:") ||
          line.includes("Sales Performance:") ||
          /^(Summary|Overview|Performance|Analysis):?$/i.test(line.trim())
        ) {
          return (
            <div key={i} className="font-bold text-blue-400 mt-4 mb-2 text-lg">
              {createHtmlWithFormatting(line)}
            </div>
          );
        }
        // Check for Note: sections
        else if (line.includes("Note:")) {
          return (
            <div
              key={i}
              className="text-gray-400 italic text-sm mt-4 border-t border-gray-700 pt-2"
            >
              {createHtmlWithFormatting(line)}
            </div>
          );
        }
        // Check for category sections (lines ending with colon)
        else if (line.trim().endsWith(":") && line.trim().length < 60) {
          return (
            <div key={i} className="font-semibold text-blue-300 mt-4 mb-1">
              {createHtmlWithFormatting(line)}
            </div>
          );
        }
        // Table headers - typically have multiple words separated by | or multiple spaces
        else if (
          (line.includes("|") || /\s{3,}/.test(line)) &&
          (line.includes("Total") ||
            line.includes("Count") ||
            line.includes("Amount") ||
            line.includes("Date") ||
            line.includes("Sales") ||
            line.includes("Revenue"))
        ) {
          return (
            <div
              key={i}
              className="font-semibold text-gray-300 my-1 border-b border-gray-700 pb-1"
            >
              {createHtmlWithFormatting(line)}
            </div>
          );
        }
        // Check for table row with monetary values
        else if (
          (line.includes("|") || /\s{3,}/.test(line)) &&
          (line.includes("IQD") ||
            line.includes("$") ||
            line.includes("%") ||
            /\d{1,3}(?:,\d{3})+/.test(line))
        ) {
          return (
            <div key={i} className="font-mono text-sm my-1 pl-2">
              {createHtmlWithFormatting(line)}
            </div>
          );
        }
        // Check for bullet points with monetary values
        else if (
          line.trim().startsWith("-") &&
          (line.includes("IQD") || line.includes("%") || line.includes("$"))
        ) {
          return (
            <div key={i} className="pl-4 my-1">
              {createHtmlWithFormatting(line)}
            </div>
          );
        }
        // Check for regular bullet points
        else if (line.trim().startsWith("-") || line.trim().startsWith("•")) {
          return (
            <div key={i} className="pl-4 my-1">
              {createHtmlWithFormatting(line)}
            </div>
          );
        }
        // Lines that represent trends (up/down)
        else if (
          line.includes("↑") ||
          line.includes("↓") ||
          line.includes("increased") ||
          line.includes("decreased") ||
          line.includes("growth") ||
          line.includes("decline")
        ) {
          return (
            <div key={i} className="my-1">
              {line.includes("↑") ||
              line.includes("increased") ||
              line.includes("growth") ? (
                <span className="text-green-400">
                  {createHtmlWithFormatting(line)}
                </span>
              ) : (
                <span className="text-red-400">
                  {createHtmlWithFormatting(line)}
                </span>
              )}
            </div>
          );
        }
        // Check for numbered list items (like "1.", "2.")
        else if (/^\d+\./.test(line.trim())) {
          return (
            <div key={i} className="pl-4 my-1">
              {createHtmlWithFormatting(line)}
            </div>
          );
        }
        // Check for comparison lines (often containing "vs" or "compared to")
        else if (line.includes(" vs ") || line.includes("compared to")) {
          return (
            <div key={i} className="my-1 italic">
              {createHtmlWithFormatting(line)}
            </div>
          );
        }
        // Lines with monetary values or percentages
        else if (
          line.includes("IQD") ||
          line.includes("%") ||
          line.includes("$") ||
          /\d{3,}/.test(line)
        ) {
          return (
            <div key={i} className="my-1">
              {createHtmlWithFormatting(line)}
            </div>
          );
        }
        // Lines that might be recommendations
        else if (
          line.includes("recommend") ||
          line.includes("should") ||
          line.includes("suggested") ||
          line.includes("consider")
        ) {
          return (
            <div key={i} className="my-1 text-blue-200">
              {createHtmlWithFormatting(line)}
            </div>
          );
        }
        // Lines for time periods or date ranges
        else if (
          line.includes("month") ||
          line.includes("week") ||
          line.includes("period") ||
          line.includes("quarter") ||
          line.includes("Q1") ||
          line.includes("Q2") ||
          line.includes("Q3") ||
          line.includes("Q4")
        ) {
          return (
            <div key={i} className="my-1 font-medium">
              {createHtmlWithFormatting(line)}
            </div>
          );
        }
        // Regular text lines
        else {
          return (
            <div key={i} className="my-1">
              {line || "\u00A0"}
            </div>
          );
        }
      })}
    </div>
  );
};

export default function ChatPage() {
  const [message, setMessage] = useState("");
  const [messages, setMessages] = useState<{ text: string; isUser: boolean }[]>(
    []
  );
  const textareaRef = useRef<HTMLTextAreaElement>(null);

  // Function to auto-resize the textarea
  const autoResizeTextarea = () => {
    const textarea = textareaRef.current;
    if (textarea) {
      // Reset height to auto to get the correct scrollHeight
      textarea.style.height = "auto";
      // Set the height to scrollHeight to fit content
      textarea.style.height = `${textarea.scrollHeight}px`;
    }
  };

  // Resize on every change
  useEffect(() => {
    autoResizeTextarea();
  }, [message]);

  // Resize on initial render
  useEffect(() => {
    autoResizeTextarea();
  }, []);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (message.trim()) {
      // Add the user message to the chat
      const userMessage = message.trim();
      setMessages([...messages, { text: userMessage, isUser: true }]);

      // Clear the input field
      setMessage("");

      try {
        // Send the message to the n8n webhook
        const result = await sendMessageToWebhook(userMessage);

        // Display a response message
        if (result.success) {
          setMessages((prev) => [
            ...prev,
            {
              text:
                result.responseText || "Message sent successfully to webhook!",
              isUser: false,
            },
          ]);
        } else {
          setMessages((prev) => [
            ...prev,
            {
              text: `Error: ${result.error || "Failed to send message"}`,
              isUser: false,
            },
          ]);
        }
      } catch (error) {
        // Handle any unexpected errors
        console.error("Error in handleSubmit:", error);
        setMessages((prev) => [
          ...prev,
          {
            text: "An unexpected error occurred. Please try again.",
            isUser: false,
          },
        ]);
      }
    }
  };

  return (
    <div className="flex h-screen">
      {/* Sidebar */}
      <Sidebar />

      {/* Main chat area */}
      <div className="flex-1 flex flex-col items-center bg-[#2d3142]">
        <div className="max-w-5xl w-full flex flex-col flex-1">
          {/* Chat messages area */}
          <div className="flex-1 overflow-y-auto p-4 space-y-4">
            {messages.length === 0 ? (
              <div className="flex items-center justify-center h-full">
                <p className="text-gray-400">Start a conversation...</p>
              </div>
            ) : (
              messages.map((msg, index) => (
                <div
                  key={index}
                  className={`p-3 rounded-lg max-w-[80%] ${
                    msg.isUser
                      ? "ml-auto bg-[#121215] text-white"
                      : "bg-[#1c1e26] text-white"
                  }`}
                >
                  {msg.isUser ? msg.text : <FormatMessage text={msg.text} />}
                </div>
              ))
            )}
          </div>

          {/* Message input area */}
          <div className="p-4 w-full">
            <form
              onSubmit={handleSubmit}
              className="relative flex items-center"
            >
              <button type="button" className="absolute left-4 text-gray-400">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="20"
                  height="20"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                >
                  <path d="M12 2a10 10 0 1 0 10 10 10 10 0 0 0-10-10zm0 16.5v.5m0-8v4"></path>
                </svg>
              </button>
              <textarea
                ref={textareaRef}
                rows={1}
                value={message}
                onChange={(e) => setMessage(e.target.value)}
                onKeyDown={(e) => {
                  if (e.key === "Enter" && !e.shiftKey) {
                    e.preventDefault();
                    handleSubmit(e);
                  }
                }}
                placeholder="How can I help you today?"
                className="w-full py-3 pl-12 pr-16 rounded-md bg-[#121215] text-white placeholder-gray-400 focus:outline-none resize-none overflow-y-auto scrollbar-thin scrollbar-thumb-gray-600 scrollbar-track-transparent min-h-[46px] max-h-[200px]"
                style={{ paddingTop: "0.75rem", paddingBottom: "0.75rem" }}
              />
              <div className="absolute right-2 flex items-center">
                <button
                  type="submit"
                  className="p-2 text-white bg-[#121215] rounded-full hover:bg-gray-700 transition-colors"
                  aria-label="Send message"
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="20"
                    height="20"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    strokeWidth="2"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                  >
                    <line x1="22" y1="2" x2="11" y2="13"></line>
                    <polygon points="22 2 15 22 11 13 2 9 22 2"></polygon>
                  </svg>
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  );
}
